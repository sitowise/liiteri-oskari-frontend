Oskari.clazz.define('Oskari.liiteri.bundle.user-layers.UserLayersView',/** * @static constructor function */function() {	this.locale = this.instance.getLocalization()["view"];	this.datatableLocaleLocation = Oskari.getSandbox().getService('Oskari.liiteri.bundle.liiteri-ui.service.UIConfigurationService').getDataTablesLocaleLocation();	this.templates = {        'table': '<table id="userwmslayers-table"><thead><tr>' +            '<th>' + this.locale.table.name + '</th>' +            '<th>' + this.locale.table.operations + '</th>' +            '</tr></thead><tbody></tbody></table>'	},	this.table = null;	this.layerData = null;}, {    /**     * called by host to start view operations     *     * @method startPlugin     */    startPlugin: function() {    },    /**     * called by host to stop view operations     *     * @method stopPlugin     */    stopPlugin: function() {        //this.toolbar.destroy();        //this.instance.getSandbox().removeRequestHandler('liiteri-groupings.MyRequest', this.requestHandler);    },    /**     * called by host to change mode     *     * @method showMode     */    showMode: function(isShown, madeUpdateExtensionRequest) {        var sandbox = this.instance.getSandbox(),            mapModule = sandbox.findRegisteredModuleInstance('MainMapModule'),            map = mapModule.getMap(),            elCenter = this.getCenterColumn(),            elLeft = this.getLeftColumn();        if (isShown) {            /** ENTER The Mode */            /** show our mode view */            elCenter.                removeClass('span12').                addClass('span8');            elLeft.                removeClass('oskari-closed').                addClass('span4');							var element = this.prepareView();            elLeft.empty();            elLeft.append(element);			        } else {            /** EXIT The Mode */            /** remove our mode view */            elCenter.                removeClass('span8').                addClass('span12');            elLeft.                addClass('oskari-closed').                removeClass('span4');            if (!madeUpdateExtensionRequest) {                // reset tile state if not triggered by tile click                sandbox.postRequestByName('userinterface.UpdateExtensionRequest', [this.instance, 'close']);            }        }        /** notify openlayers of map size change */        map.updateSize();    },    /**     * Get left column container     */    getLeftColumn : function() {        return jQuery('.oskariui-left');    },    /**     * Get center column container     */    getCenterColumn : function() {        return jQuery('.oskariui-center');    },    /**     * Get right column container     */    getRightColumn : function() {        return jQuery('.oskariui-right');    },		createUI: function () {		// nothing to do here	},		/**	 * CUSTOM FUNCTIONS	 */		prepareView: function() {		var me = this;		var container = jQuery("<div id='userLayersContainer'></div>");				var content = jQuery("<div id='userLayersContent'></div>")		container.append(content);	    if (!me.instance.getSandbox().getUser().isLoggedIn())	        return container;				var tableElement = jQuery(me.templates.table);		content.append(tableElement);				var srsName = me.instance.getSandbox().getMap().getSrsName();		var dataTable = tableElement.DataTable({
		    "ajax": {
		        "url": me.instance.getSandbox().getAjaxUrl() + 'action_route=GetOwnWmsLayers&srs=' + srsName,		        "dataSrc": "data"
		    },		    "columns": [	            { "data": "name" },	            { "data": "id" }		    ],		    "columnDefs": [				{
				    "targets": 0,				    "render": function (data, type, row) {
				        var loadLink = jQuery('<a class="loadLink">' + data + '</a>');				        return loadLink.outerHTML();
				    }
				},				{
				    "targets": 1,				    "render": function (data, type, row) {
				        var operationsLinks = jQuery('<div class="operationsLinks"></div>');				        var editLink = jQuery('<a class="editLink glyphicon glyphicon-pencil" title="' + me.locale.table.edit + '"></a>');				        var removeLink = jQuery('<a class="removeLink glyphicon glyphicon-remove-sign" title="' + me.locale.table.remove + '"></a>');				        operationsLinks.append(editLink);				        operationsLinks.append(removeLink);				        //return operationsLinks;				        return operationsLinks.outerHTML();
				    }
				}		    ],		    "language": {
		        "url": this.datatableLocaleLocation + this.locale.datatablelanguagefile
		    },		    //"scrollY": height + "px",		    "scrollCollapse": true,		    "paging": false,		    "processing": true,		    "searching": false,		    "info": false
		});				dataTable.on( 'xhr', function () {		    var data = dataTable.ajax.json().data,		        sandbox = me.instance.getSandbox(),		        mapLayerService = sandbox.getService('Oskari.mapframework.service.MapLayerService');		    for(var i = 0; i < data.length; ++i) {	            if (!mapLayerService.findMapLayer(data[i].id)) {	                // Create the layer model	                var mapLayer = mapLayerService.createMapLayer(data[i]);	                mapLayerService.addLayer(mapLayer);        	            } else {	                mapLayerService.updateLayer(data[i].id, data[i]); 	            }		        		    }	        var eventBuilder = sandbox.getEventBuilder('UserLayers.LayersModified'),	            event = eventBuilder('refresh');	        sandbox.notifyAll(event);		} );				tableElement.find('tbody').on('click', 'a.loadLink', function () {            var data = dataTable.row($(this).parents('tr')).data(),                sandbox = me.instance.getSandbox(),                requestBuilder = sandbox.getRequestBuilder('AddMapLayerRequest');                        if (requestBuilder) {                request = requestBuilder(data.id);                sandbox.request(me.instance, request);            }        });				tableElement.find('tbody').on('click', 'a.editLink', function () {            var data = dataTable.row($(this).parents('tr')).data();						if (data) {				me._showEditPopUp(data);			}			        });				tableElement.find('tbody').on('click', 'a.removeLink', function () {            var data = dataTable.row($(this).parents('tr')).data();						if (data.id) {			    var dialog = Oskari.clazz.create('Oskari.userinterface.component.Popup'),                    okBtn = Oskari.clazz.create('Oskari.userinterface.component.Button'),                    cancelBtn = Oskari.clazz.create('Oskari.userinterface.component.Button');                okBtn.setTitle("Poista");                okBtn.addClass('primary');                    okBtn.setHandler(function () {                    var url = me.instance.getSandbox().getAjaxUrl() + 'action_route=DeleteUserWmsLayer';                                        jQuery.ajax({                        type: 'POST',                        dataType: 'text',                        url: url,                        beforeSend: function (x) {                            if (x && x.overrideMimeType) {                                x.overrideMimeType("application/j-son;charset=UTF-8");                            }                        },                        data: {                            "layer_id": data.id                        },                        success: function () {                            me.refreshList();                            var dialog = Oskari.clazz.create('Oskari.userinterface.component.Popup');                            dialog.show('Poistit tason onnistuneesti.', 'Poistit tason onnistuneesti.');                            dialog.fadeout(3000);                        },                        error: function (jqXHR, textStatus, errorThrown) {                            if (jqXHR.responseText && JSON.parse(jqXHR.responseText)) {                               var errorMessage = JSON.parse(jqXHR.responseText)['error'];                               var dialog = Oskari.clazz.create('Oskari.userinterface.component.Popup'),                                   okBtn = Oskari.clazz.create('Oskari.userinterface.component.Button');                               okBtn.setTitle("Sulje");                               okBtn.addClass('primary');                                              okBtn.setHandler(function () {                                   dialog.close();                               });                               dialog.show(errorMessage, errorMessage, [okBtn]);                               dialog.makeModal();                            } else {                                var dialog = Oskari.clazz.create('Oskari.userinterface.component.Popup'),                                    okBtn = Oskari.clazz.create('Oskari.userinterface.component.Button');                                okBtn.setTitle("Sulje");                                okBtn.addClass('primary');                                                okBtn.setHandler(function () {                                    dialog.close();                                });                                dialog.show('Poistaminen epäonnistui!', 'Poistaminen epäonnistui!', [okBtn]);                                dialog.makeModal();                            }                        }                    });                    dialog.close();                });                                cancelBtn.setTitle("Peruuta");                cancelBtn.setHandler(function () {                    dialog.close();                });                dialog.show('Haluatko varmasti poistaa tason?','', [okBtn,cancelBtn]);                dialog.makeModal();			}        });				this.table = dataTable;		var buttonsContainer = jQuery('<div id="userLayersButtonsContainer"></div>');		var addNewButton = jQuery('<a class="addButton">+ Tallenna uusi</a>');//TODO localization		addNewButton.click(function(){			me._showEditPopUp();		});				buttonsContainer.append(addNewButton);		content.append(buttonsContainer);				return container;	},		refreshList: function() {		this.table.ajax.reload();	},		_showEditPopUp: function(editData) {		var me = this,			sandbox = this.instance.getSandbox(),			dialog = Oskari.clazz.create('Oskari.userinterface.component.Popup'),			cancelBtn = dialog.createCloseButton('Peruuta'), //TODO localization			saveBtn = Oskari.clazz.create('Oskari.userinterface.component.Button');				var content = jQuery('<div></div>');		var wmsUrlField = Oskari.clazz.create('Oskari.userinterface.component.FormInput', 'wmsUrlField');		wmsUrlField.getField().find('input').before('<br />');		wmsUrlField.setLabel("WMS-palvelimen osoite"); //TODO: to locale file		content.append(wmsUrlField.getField());				if(typeof editData !== 'undefined') {		    content.append($('<input type="hidden" id="layerId" value="' + editData.id + '">'));		    wmsUrlField.setValue(editData.wmsUrl);		}				var fetchButton = Oskari.clazz.create('Oskari.userinterface.component.Button');		fetchButton.setTitle("Yhdistä");		fetchButton.setHandler(function() {		    $('#capabilitiesContent').empty().append($('<img src="/Oskari/resources/ajax-loader-small.gif"/>'));		    fetchButton.setEnabled(false);            saveBtn.setEnabled(false);		    me.instance._sendRequest(sandbox.getAjaxUrl() + "action_route=GetWSCapabilities&url=" + wmsUrlField.getValue(), 		    function(resp) {	            fetchButton.setEnabled(true);                saveBtn.setEnabled(true);                                me.layerData = resp;	            		        var capContent = $('#capabilitiesContent');		        capContent.empty();		        var layerLabel =  $('<label>Taso<br/></label>');		        var layerSelect = $('<select id="ownWmsLayerSelector"/>');		        for(var i = 0; i < resp.layers.length; ++i) {		            $('<option />', {value: i, text: resp.layers[i].name[Oskari.getLang()]}).appendTo(layerSelect);		        }		        layerLabel.append(layerSelect);		        capContent.append(layerLabel);            },            function (jqXHR, textStatus) {                fetchButton.setEnabled(true);                $('#capabilitiesContent').empty();                                var key = textStatus;                try {                     var jsonObject = jQuery.parseJSON(jqXHR.responseText);                     if (jsonObject.hasOwnProperty('error'))                        key = jsonObject['error'];                }                catch (e) { }                    var dialog = Oskari.clazz.create('Oskari.userinterface.component.Popup');                    dialog.show(me.getLocalization('error'), key);                    dialog.fadeout();                }            );		});				var fetchButtonContainer = $('<div id="fetchButtonContainer" style="margin: 10px;"></div>');		content.append(fetchButtonContainer);		fetchButtonContainer.append(fetchButton.getButton());				content.append($('<div id="capabilitiesContent"></div>'));		saveBtn.addClass('primary');		saveBtn.setTitle('Tallenna'); //TODO localization		saveBtn.setHandler(function() {			dialog.close();			var layer = me.layerData.layers[$('#ownWmsLayerSelector').val()];						var data = {};            // add layer type and version            data.version = me.layerData.version;            data.layerType = 'wmslayer';            if ($('#layerId').val() !== null) {                data.layer_id = $('#layerId').val();            }            data.name_fi = layer.name.fi;            data.name_sv = layer.name.sv;            data.name_en = layer.name.en;            // type can be either wmslayer, base or groupMap            data.type = 'wmslayer';            data.layerName = layer.layerName;            data.layerUrl = layer.url;            data.opacity = 100;//            data.style = form.find('#add-layer-style').val();//            data.minScale = form.find('#add-layer-minscale').val();// || 16000000;//            data.maxScale = form.find('#add-layer-maxscale').val();// || 1;//            data.legendImage = form.find('#add-layer-legendImage').val();//            data.metadataId = form.find('#add-layer-datauuid').val();//            data.xslt = form.find('#add-layer-xslt').val();//            data.gfiType = form.find('#add-layer-responsetype').val();                                    jQuery.ajax({                type: "POST",                data : data,                dataType: 'json',                url: sandbox.getAjaxUrl() + "action_route=SaveUserWmsLayer",                success: function (resp) {                    // response should be a complete JSON for the new layer                    if(!resp) {                        alert(me.instance.getLocalization('admin').update_or_insert_failed);                    }                    else if(resp.error) {                        alert(me.instance.getLocalization('admin')[resp.error] || resp.error);                    }                    // happy case - we got id                    if (resp.id) {                        me.refreshList();                        if(data.hasOwnProperty("layer_id")) {                                                    }                    }                    if(resp.warn) {                        alert(me.instance.getLocalization('admin')[resp.warn] || resp.warn);                    }                },                error: function (jqXHR, textStatus) {                    if (jqXHR.status !== 0) {                        var loc = me.instance.getLocalization('admin'),                            err = loc.update_or_insert_failed;                        if (jqXHR.responseText) {                            var jsonResponse = jQuery.parseJSON(jqXHR.responseText);                            if (jsonResponse && jsonResponse.error) {                                err = jsonResponse.error;                                // see if we recognize the error                                var errVar = null;                                if (err.indexOf('mandatory_field_missing:') === 0) {                                    errVar = err.substring('mandatory_field_missing:'.length);                                    err = 'mandatory_field_missing';                                } else if (err.indexOf('invalid_field_value:') === 0) {                                    errVar = err.substring('invalid_field_value:'.length);                                    err = 'invalid_field_value';                                } else if (err.indexOf('operation_not_permitted_for_layer_id:') === 0) {                                    errVar = err.substring('operation_not_permitted_for_layer_id:'.length);                                    err = 'operation_not_permitted_for_layer_id';                                } else if (err.indexOf('no_layer_with_id') === 0) {                                    errVar = err.substring('no_layer_with_id:'.length);                                    err = 'no_layer_with_id';                                }                                err = loc[err] || err;                                if(errVar) {                                    if(loc[errVar]) {                                        err += loc[errVar];                                    }                                    else {                                        err += errVar;                                    }                                }                            }                        }                        alert(err);                    }                }            });		});		saveBtn.setEnabled(false);		dialog.show('Lisää WMS-rajapinta', content, [saveBtn, cancelBtn]); //TODO localization		//dialog.makeModal();	}	}, {    // the protocol / interface of this object is view    "protocol": ["Oskari.userinterface.View"],    // extends DefaulView    "extend": ["Oskari.userinterface.extension.DefaultView"]});